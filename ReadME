Tanay Vysyaraju: tv193
Saroop Makhija: ssm229

**Overview**
This project implements a basic command-line shell (mysh) in C using POSIX system calls such as read(), fork(), execv(), dup2(), and pipe(). 
The shell supports both interactive and batch modes and interprets a variety of commands and features in a unified input-processing loop.

    • Input is handled using read(), with dynamic memory allocation to support arbitrarily long lines. 
      The shell reads a full command before processing and does not read beyond a newline until execution is complete.

    • Interactive mode is determined using isatty() and includes a welcome message, command prompt ("mysh> "), and an exit message.
      Batch mode reads from a file or piped input and suppresses interactive prompts.

    • Tokenization is done using strtok() with standard whitespace delimiters.
      Special symbols (<, >, |) are assumed to be whitespace-separated and are treated as distinct tokens.

    • Built-in commands (cd, pwd, which, exit, die) are implemented directly within the shell. 
      Each is matched against the first token and dispatched accordingly without forking.

        ◦ cd uses chdir() and returns success/failure based on argument validation and system errors.
        ◦ pwd calls getcwd() and prints the current working directory.
        ◦ which searches /usr/local/bin, /usr/bin, and /bin using access().
        ◦ exit and die invoke exit() with 0 or 1 respectively, with die printing arguments first.

    • Redirection is parsed after arguments using "<" and ">" markers.
      The shell stores filenames and applies dup2() in the child process after opening the appropriate file descriptors.
      Redirection is skipped for commands lacking filenames or on open failure.

    • External commands are located and executed using execv(). 
      If a slash is present in the command name, it is treated as a path and otherwise, the shell searches in the predefined directories.

    • Pipes are supported between exactly two commands. 
      The shell identifies the '|' symbol, creates a pipe using pipe(), forks two children, and connects their input/output via dup2().
      The parent waits for both children and uses the second command’s exit status to determine success.

    • Wildcard expansion is performed during tokenization.
      If a token contains '*', the shell uses opendir() and readdir() to scan the relevant directory.
      fnmatch() is used to match files against the pattern.
      If matches exist, they are inserted into the argument list and otherwise, the token is preserved as-is.

    • Conditional execution is supported using 'and' and 'or' as the first tokens of a line.
      The shell evaluates the previous command’s success and decides whether to skip or execute the next command accordingly.
      These tokens are stripped before command execution and do not participate in argument passing.

**Testing Strategy**
A comprehensive test suite was developed to ensure that every requirement is met and to help detect regression errors.
Our testing is divided into several categories:

    1    Built-ins and Directory Navigation:
        ◦    Objective: Verify that built-in commands function correctly.
        ◦    Tests: • Use “pwd” to display the current directory.
                  • Use “cd” to change directories (both valid and invalid paths).
                     Expected outcome: Successful directory changes print the correct working directory; 
                     an invalid “cd” prints an error message.
                  • Verify that “exit” terminates the shell immediately.
                  • Verify that “die” prints its arguments and terminates the shell with an error status.
        ◦    Test File: test_builtins.sh

    2    Redirection:
        ◦    Objective: Confirm that input and output redirection works as specified.
        ◦    Tests: • Redirect the output of an external command (e.g., “ls test_env”) to a file using “>”, and then display the file content.
                  • Use “<” to pass a file’s contents as input to commands like “cat”.
                  • Check error handling when using redirection with inaccessible files or directories.
        ◦    Test File: test_redirection.sh

    3    Pipelines:
        ◦    Objective: Ensure that piping output from one process to another functions correctly.
        ◦    Tests: • Pipe the output of “ls test_env” into “grep” to filter file names.
                  • Confirm that the pipeline returns a success or failure based on the last command’s exit status.
        ◦    Test File: test_pipe.sh

    4    Wildcard Expansion:
        ◦    Objective: Validate that tokens with wildcards are expanded appropriately.
        ◦    Tests: • Execute commands such as “ls test_env/*.txt” and “ls test_env/subdir/*.txt”.
                  • Verify that if no file matches the wildcard, the token remains unchanged.
        ◦    Test File: test_wildcards.sh

    5    Conditional Execution:
        ◦    Objective: Check that conditional commands using “and” and “or” execute based on the previous command’s status.
        ◦    Tests: • Execute a failing command (e.g., “boguscmd”) followed by “or echo …” to verify that the fallback command runs.
                  • Execute another failing command followed by “and die …” to confirm that the shell terminates after reporting a forced failure.
                  • Verify that conditional operators are rejected as the first command.
        ◦    Test File: test_conditionals.sh
